{"version":3,"sources":["logo.svg","redux/actions/types.js","redux/actions/game.js","components/Square.js","components/GameBoard.js","components/Player.js","components/WinnerPopup.js","App.js","redux/reducers/game.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","game","playerAction","squareNum","count","symbol","index","row","dispatch","type","payload","Square","props","handleSquareFill","playerOneBool","fontAwesome","setState","updateGameState","state","handleGameWinner","currentGame","gameSquare","React","createRef","undefined","this","prevProps","numSymbol","ref","renderedWeatherData","onClick","currPlayer","id","className","title","Component","connect","playerOneActive","symbolCount","currGame","GameBoard","createSquareElems","divs","i","push","key","squareElems","console","log","Player","score","currentWinner","num","playerOneScore","playerTwoScore","WinnerPopup","handleResetGame","resetGame","display","theWinner","winner","includes","App","createPlayers","greeting","msg","message","INITIAL_STATE","combineReducers","action","map","el","currGameArr","incScore","forEach","arr","every","h","column","x","diagonal1","reversedArray","slice","reverse","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddf66c7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const game = {\n    STARTGAME: \"STARTGAME\",\n    CHANGEPLAYER: \"CHANGEPLAYER\",\n    UPDATEGAMESTATE: \"UPDATEGAMESTATE\",\n    PLAYERWINS: \"PLAYERWINS\",\n    RESETGAME: \"RESETGAME\"\n}","import { game } from \"./types\";\n\nexport const greeting = () => {\n    // const message = msg;\n    return {\n        type: game.STARTGAME\n    };\n}\n\nexport const playerAction = (squareNum, count, symbol, index, row) => dispatch => {\n    dispatch({\n        type: game.CHANGEPLAYER,\n        payload: count\n    });\n}\n\nexport const updateGameState = (symbol, index, row) => dispatch => {\n    dispatch({\n        type: game.UPDATEGAMESTATE,\n        payload: {\n            symbol,\n            index,\n            row\n        }\n    });\n}\n\nexport const handleGameWinner = (currGame, symbol) => dispatch => {\n    dispatch({\n        type: game.PLAYERWINS,\n        payload: {\n            currGame,\n            symbol\n        }\n    })\n}\n\nexport const resetGame = () => dispatch => {\n    dispatch({\n        type: game.RESETGAME,\n        payload: {\n            symbolCount: 0,\n            playerOneActive: true,\n            currentWinner: \"\",\n            currentGame: [[null, null, null],\n            [null, null, null],\n            [null, null, null]]\n        }\n    })\n}","import React, { Component } from \"react\";\n\nimport { playerAction, updateGameState, handleGameWinner } from \"../../src/redux/actions/game\";\nimport { connect } from 'react-redux';\n\nclass Square extends Component {\n\n    componentDidMount() {\n        let row = 0;\n        let index = 0;\n\n        if (this.props.count % 3 === 0) {\n            index = 0;\n            // row = 0;\n        } else if (this.props.count % 3 === 1) {\n            index = 1;\n            // row = 1;\n        } else if (this.props.count % 3 === 2) {\n            index = 2;\n            // row = 2\n        }\n\n        if (this.props.count <= 2) {\n            row = 0;\n        } else if (this.props.count >= 3 && this.props.count <= 5) {\n            row = 1;\n        } else if (this.props.count >= 6) {\n            row = 2;\n        }\n\n        this.setState({\n            row,\n            index\n        });\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.gameSquare = React.createRef();\n        this.symbol = React.createRef();\n        this.state = {\n            symbol: undefined,\n            fontAwesome: undefined,\n            row: 0,\n            index: 0\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.numSymbol !== this.props.numSymbol && this.props.numSymbol === 0) {\n            this.setState({\n                symbol: undefined,\n                fontAwesome: undefined,\n            });\n        }\n    }\n\n    handleSquareFill = (playerOneBool) => {\n        let fontAwesome = playerOneBool ? \"times\" : \"circle-thin\";\n        let symbol = playerOneBool ? \"X\" : \"O\";\n        this.setState({\n            fontAwesome,\n            symbol\n        }, () => {\n            this.props.updateGameState(this.state.symbol, this.state.index, this.state.row);\n            this.props.handleGameWinner(this.props.currentGame, this.state.symbol);\n        });\n    }\n\n    render() {\n        \n        return (\n            <div\n                ref={this.renderedWeatherData}\n                onClick={() => {\n                    if (!this.state.symbol) {\n                        this.props.playerAction(this.props.count, 1);\n                        this.handleSquareFill(this.props.currPlayer);\n                        // console.log(this.state.symbol);\n                        // ;\n                    }\n                }}\n                id={this.props.id}\n                className={this.props.className}\n                title={`Square ${this.props.count}`}>\n                    <i ref={this.symbol} className={`fa fa-${this.state.fontAwesome}`}></i>\n                    {/* {this.state.symbol} */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    currPlayer: state.game.playerOneActive,\n    numSymbol: state.game.symbolCount,\n    currentGame: state.game.currentGame\n  })\n  \n  export default connect(\n    mapStateToProps,\n    {\n        playerAction,\n        updateGameState,\n        handleGameWinner\n    }\n  )(Square);","import React, { Component } from \"react\";\n\nimport Square from \"./Square\";\n\nclass GameBoard extends Component {\n\n    componentDidMount() {\n        this.createSquareElems();\n    }\n\n    componentWillUpdate() {\n        console.log(\"update\");\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            squareNum: 9,\n            squareElems: []\n        };\n    }\n\n    createSquareElems = () => {\n        let divs = [];\n        // outer loop to create parent\n        for (let i = 0; i < this.state.squareNum; i++) {\n            divs.push(<Square key={i} count={i} id={`Square-${i}`} className=\"game-square\"/>);\n        }\n        return divs;\n    }\n\n    render() {\n        return(\n            <>\n                <h1>Game board</h1>\n                <article id=\"gameboard\">\n                    {/* {(() => {\n                        for (let i = 0; i < this.state.squares; i++) {\n                            console.log(i);\n                            return <Square \n                                    key={i} \n                                    id={i}\n                                    className=\"game-square\"/>;\n                        }\n                    })()} */}\n                    {/* {this.createSquareElems} */}\n                    {this.createSquareElems()}\n                </article>\n            </>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component } from \"react\";\n\nimport { playerAction } from \"../../src/redux/actions/game\";\nimport { connect } from 'react-redux';\n\nclass Player extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            score: 0\n        }\n    }\n\n    componentDidMount() {\n        // const active = () => {\n        //     if ((this.props.currPlayer && this.props.num === 1) || (!this.props.currPlayer && this.props.num === 2)) {\n        //         return \"active-player\";\n        //     }\n        // };\n        // active();\n        // console.log(active, this.props.num);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentWinner !== this.props.currentWinner && this.props.num === 1) {\n            this.setState({\n                score: this.props.playerOneScore\n            });\n        } else if (prevProps.currentWinner !== this.props.currentWinner && this.props.num === 2) {\n            this.setState({\n                score: this.props.playerTwoScore\n            });\n        }\n    }\n\n    render() {\n        const active = () => {\n            if ((this.props.currPlayer && this.props.num === 1) || (!this.props.currPlayer && this.props.num === 2)) {\n                return \"active-player\";\n            } else {\n                return \"\";\n            }\n        };\n\n        // const playerScore = () => {\n        //     if \n        // }\n        return (\n            <div className={`player ${active()}`}>\n                <h2>Player {this.props.num}</h2>\n                <p>Score: {this.state.score}</p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currPlayer: state.game.playerOneActive,\n    currentWinner: state.game.currentWinner,\n    playerOneScore: state.game.playerOneScore,\n    playerTwoScore: state.game.playerTwoScore\n  })\n  \n  export default connect(\n    mapStateToProps,\n    {\n        playerAction\n    }\n  )(Player);","import React, { Component } from \"react\";\n\nimport { resetGame } from \"../../src/redux/actions/game\";\nimport { connect } from 'react-redux';\n\nclass WinnerPopup extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            display: \"hide\",\n            theWinner: \"\"\n        }\n    }\n\n    handleResetGame = () => {\n        this.props.resetGame();\n        this.setState({\n            display: \"hide\",\n            theWinner: \"\"\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.winner !== this.props.winner && !prevProps.winner.includes(\"Player\")) {\n            this.setState({\n                display: \"\",\n                theWinner: this.props.winner\n            });\n        }\n        \n    }\n    /*export const resetGame = (symbolCount, playerOneActive, currentWinner, currentGame) => dispatch => {*/\n    render() {\n        return(\n            <div id=\"winner-popup\" className={`${this.state.display}`}>\n                <h2>{this.state.theWinner} wins!</h2>\n                <button onClick={this.handleResetGame}>Reset Game</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    winner: state.game.currentWinner\n});\n\nexport default connect(\n    mapStateToProps, \n    {\n        resetGame    \n    }\n)(WinnerPopup);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport GameBoard from \"./components/GameBoard\";\nimport Player from \"./components/Player\";\nimport WinnerPopup from \"./components/WinnerPopup\";\n\nimport { greeting } from \"../src/redux/actions/game\";\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.greeting();\n  }\n\n  constructor(props) {\n    super(props);\n    // this.state = {\n    //   player\n    // }\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   if (prevProps.playerOneScore !== this.props.playerOneScore) {\n  //       this.setState({\n  //           score: this.props.playerOneScore\n  //       });\n  //   } else if (prevProps.playerTwoScore !== this.props.playerTwoScore) {\n  //       this.setState({\n  //           score: this.props.playerTwoScore\n  //       });\n  //   }\n  // }\n\n  createPlayers = () => {\n    let divs = [];\n    // outer loop to create parent\n    for (let i = 1; i <= 2; i++) {\n      // let playerScore = i === 1 ? this.props.playerOneScore : this.props.playerTwoScore;\n      divs.push(<Player key={i} num={i} id={`player-${i}`} className=\"game-player\"/>);\n    }\n    return divs;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Tic Tac Toe</h1>\n        <div id=\"players\">\n          {/* <Player num={1} id=\"player-1\" />\n          <Player num={2} id=\"player-2\" /> */}\n          {this.createPlayers()}\n        </div>\n        <GameBoard />\n        <WinnerPopup />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  msg: state.message,\n  playerOneScore: state.game.playerOneScore,\n  playerTwoScore: state.game.playerTwoScore\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    greeting\n  }\n)(App);\n","import { game } from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    message: \"Hello World\",\n    playerOneScore: 0,\n    playerTwoScore: 0,\n    symbolCount: 0,\n    playerOneActive: true,\n    currentWinner: \"\",\n    currentGame: [[null, null, null],\n                  [null, null, null],\n                  [null, null, null]]\n}\n\nexport default function gameReducer(state = INITIAL_STATE, action) {\n    // console.log(action.type === game.RESETGAME);\n    switch(action.type) {\n        case game.STARTGAME:\n            console.log(state.message);\n            return state;\n        case game.CHANGEPLAYER:\n            return {\n                ...state,\n                symbolCount: state.symbolCount + action.payload.count,\n                playerOneActive: !state.playerOneActive\n            };\n        case game.UPDATEGAMESTATE:\n            return {\n                ...state,\n                currentGame: state.currentGame.map(\n                    (el, i) => {\n                        if (i === action.payload.row) {\n                            let row = state.currentGame[action.payload.row];\n                            row[action.payload.index] = action.payload.symbol;\n                            return row;\n                        } else {\n                            return el;\n                        }\n                    }\n                )\n            }\n        case game.PLAYERWINS:\n            let currGameArr = state.currentGame;\n            let winner = \"\";\n            let incScore = 0;\n            currGameArr.forEach((el,i, arr) => {\n\n                // Check if any rows have the same symbols\n                if (el.every((el,i) => el === \"X\")) {\n                    winner = \"Player 1\";\n                    incScore = 1;\n                } else if (el.every((el,i) => el === \"O\")) {\n                    winner = \"Player 2\";\n                    incScore = 1;\n                }\n            });\n            \n            // Check if any columns have the same symbols\n            for (let h = 0; h < 3; h++) {\n                let column = currGameArr.map(x => x[h]);\n                column.forEach((el, i) => {\n                    if (column.every((el,i) => el === \"X\")) {\n                        winner = \"Player 1\";\n                        incScore = 1;\n                    } else if (column.every((el,i) => el === \"O\")) {\n                        winner = \"Player 2\";\n                        incScore = 1;\n                    }\n                });\n            }\n\n            // Check if any diagonals have the same symbols\n            let diagonal1 = currGameArr.map((el,i) => {\n                return el[i];\n            });\n\n            if (diagonal1.every((el,i) => el === \"X\")) {\n                winner = \"Player 1\";\n                incScore = 1;\n            } else if (diagonal1.every((el,i) => el === \"O\")) {\n                winner = \"Player 2\";\n                incScore = 1;\n            }\n            \n            let reversedArray = currGameArr.slice(0).reverse().map((el,i) => {\n                return el[i];\n            });\n            \n            if (reversedArray.every((el,i) => el === \"X\")) {\n                winner = \"Player 1\";\n                incScore = 1;\n            } else if (reversedArray.every((el,i) => el === \"O\")) {\n                winner = \"Player 2\";\n                incScore = 1;\n            }\n\n            \n            if (winner !== \"\" && incScore !== 0) {\n                if (winner === \"Player 1\") {\n                    return {\n                        ...state,\n                        currentWinner: winner,\n                        playerOneScore: state.playerOneScore + incScore\n                    };\n                } else {\n                    return {\n                        ...state,\n                        currentWinner: winner,\n                        playerTwoScore: state.playerTwoScore + incScore\n                    };\n                }\n                \n            }\n            // break;\n        case game.RESETGAME:\n            const { symbolCount, playerOneActive, currentWinner, currentGame } = action.payload;\n            if (action.type === game.RESETGAME) {\n                return {\n                    ...state,\n                    symbolCount,\n                    playerOneActive,\n                    currentWinner,\n                    currentGame\n                }\n            }\n        default:\n            return state;\n    }\n}\n\n","import { combineReducers } from \"redux\";\nimport gameReducer from \"./game\";\n\nexport default combineReducers({\n    game: gameReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default store;","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}